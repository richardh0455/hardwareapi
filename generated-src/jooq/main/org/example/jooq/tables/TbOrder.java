/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.example.jooq.Keys;
import org.example.jooq.Public;
import org.example.jooq.tables.records.TbOrderRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbOrder extends TableImpl<TbOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_order</code>
     */
    public static final TbOrder TB_ORDER = new TbOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbOrderRecord> getRecordType() {
        return TbOrderRecord.class;
    }

    /**
     * The column <code>public.tb_order.order_id</code>.
     */
    public final TableField<TbOrderRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tb_order.order_customer_id</code>.
     */
    public final TableField<TbOrderRecord, Integer> ORDER_CUSTOMER_ID = createField(DSL.name("order_customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tb_order.order_created_at</code>.
     */
    public final TableField<TbOrderRecord, LocalDateTime> ORDER_CREATED_AT = createField(DSL.name("order_created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tb_order.order_status</code>.
     */
    public final TableField<TbOrderRecord, String> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_order.updated_at</code>.
     */
    public final TableField<TbOrderRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private TbOrder(Name alias, Table<TbOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbOrder(Name alias, Table<TbOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_order</code> table reference
     */
    public TbOrder(String alias) {
        this(DSL.name(alias), TB_ORDER);
    }

    /**
     * Create an aliased <code>public.tb_order</code> table reference
     */
    public TbOrder(Name alias) {
        this(alias, TB_ORDER);
    }

    /**
     * Create a <code>public.tb_order</code> table reference
     */
    public TbOrder() {
        this(DSL.name("tb_order"), null);
    }

    public <O extends Record> TbOrder(Table<O> child, ForeignKey<O, TbOrderRecord> key) {
        super(child, key, TB_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TbOrderRecord, Integer> getIdentity() {
        return (Identity<TbOrderRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TbOrderRecord> getPrimaryKey() {
        return Keys.TB_ORDER_PKEY;
    }

    @Override
    public TbOrder as(String alias) {
        return new TbOrder(DSL.name(alias), this);
    }

    @Override
    public TbOrder as(Name alias) {
        return new TbOrder(alias, this);
    }

    @Override
    public TbOrder as(Table<?> alias) {
        return new TbOrder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrder rename(String name) {
        return new TbOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrder rename(Name name) {
        return new TbOrder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrder rename(Table<?> name) {
        return new TbOrder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
