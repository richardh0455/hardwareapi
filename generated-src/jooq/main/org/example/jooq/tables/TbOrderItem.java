/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.example.jooq.Keys;
import org.example.jooq.Public;
import org.example.jooq.tables.records.TbOrderItemRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbOrderItem extends TableImpl<TbOrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_order_item</code>
     */
    public static final TbOrderItem TB_ORDER_ITEM = new TbOrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbOrderItemRecord> getRecordType() {
        return TbOrderItemRecord.class;
    }

    /**
     * The column <code>public.tb_order_item.orit_id</code>.
     */
    public final TableField<TbOrderItemRecord, Integer> ORIT_ID = createField(DSL.name("orit_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tb_order_item.orit_order_id</code>.
     */
    public final TableField<TbOrderItemRecord, Integer> ORIT_ORDER_ID = createField(DSL.name("orit_order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tb_order_item.orit_product_id</code>.
     */
    public final TableField<TbOrderItemRecord, Integer> ORIT_PRODUCT_ID = createField(DSL.name("orit_product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tb_order_item.orit_quantity</code>.
     */
    public final TableField<TbOrderItemRecord, Integer> ORIT_QUANTITY = createField(DSL.name("orit_quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tb_order_item.orit_price</code>.
     */
    public final TableField<TbOrderItemRecord, BigDecimal> ORIT_PRICE = createField(DSL.name("orit_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.tb_order_item.orit_status</code>.
     */
    public final TableField<TbOrderItemRecord, String> ORIT_STATUS = createField(DSL.name("orit_status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.tb_order_item.orit_created_at</code>.
     */
    public final TableField<TbOrderItemRecord, LocalDateTime> ORIT_CREATED_AT = createField(DSL.name("orit_created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tb_order_item.updated_at</code>.
     */
    public final TableField<TbOrderItemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private TbOrderItem(Name alias, Table<TbOrderItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbOrderItem(Name alias, Table<TbOrderItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_order_item</code> table reference
     */
    public TbOrderItem(String alias) {
        this(DSL.name(alias), TB_ORDER_ITEM);
    }

    /**
     * Create an aliased <code>public.tb_order_item</code> table reference
     */
    public TbOrderItem(Name alias) {
        this(alias, TB_ORDER_ITEM);
    }

    /**
     * Create a <code>public.tb_order_item</code> table reference
     */
    public TbOrderItem() {
        this(DSL.name("tb_order_item"), null);
    }

    public <O extends Record> TbOrderItem(Table<O> child, ForeignKey<O, TbOrderItemRecord> key) {
        super(child, key, TB_ORDER_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TbOrderItemRecord, Integer> getIdentity() {
        return (Identity<TbOrderItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TbOrderItemRecord> getPrimaryKey() {
        return Keys.TB_ORDER_ITEM_PKEY;
    }

    @Override
    public TbOrderItem as(String alias) {
        return new TbOrderItem(DSL.name(alias), this);
    }

    @Override
    public TbOrderItem as(Name alias) {
        return new TbOrderItem(alias, this);
    }

    @Override
    public TbOrderItem as(Table<?> alias) {
        return new TbOrderItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrderItem rename(String name) {
        return new TbOrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrderItem rename(Name name) {
        return new TbOrderItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbOrderItem rename(Table<?> name) {
        return new TbOrderItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, BigDecimal, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
